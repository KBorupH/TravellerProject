//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "route_destinations")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub route_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub destination_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::destinations::Entity",
        from = "Column::DestinationId",
        to = "super::destinations::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Destinations,
    #[sea_orm(
        belongs_to = "super::routes::Entity",
        from = "Column::RouteId",
        to = "super::routes::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Routes,
}

impl Related<super::destinations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Destinations.def()
    }
}

impl Related<super::routes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Routes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
