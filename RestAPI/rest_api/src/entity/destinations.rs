//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "destinations")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub departure: String,
    pub arrival: String,
    pub station_id: Uuid,
    pub roadmap_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::roadmaps::Entity",
        from = "Column::RoadmapId",
        to = "super::roadmaps::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Roadmaps,
    #[sea_orm(has_many = "super::route_destinations::Entity")]
    RouteDestinations,
    #[sea_orm(
        belongs_to = "super::stations::Entity",
        from = "Column::StationId",
        to = "super::stations::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Stations,
}

impl Related<super::roadmaps::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Roadmaps.def()
    }
}

impl Related<super::route_destinations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RouteDestinations.def()
    }
}

impl Related<super::stations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stations.def()
    }
}

impl Related<super::routes::Entity> for Entity {
    fn to() -> RelationDef {
        super::route_destinations::Relation::Routes.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::route_destinations::Relation::Destinations
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
