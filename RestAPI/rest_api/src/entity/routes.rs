//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "routes")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub train_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::route_destinations::Entity")]
    RouteDestinations,
    #[sea_orm(
        belongs_to = "super::trains::Entity",
        from = "Column::TrainId",
        to = "super::trains::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Trains,
}

impl Related<super::route_destinations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RouteDestinations.def()
    }
}

impl Related<super::trains::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Trains.def()
    }
}

impl Related<super::destinations::Entity> for Entity {
    fn to() -> RelationDef {
        super::route_destinations::Relation::Destinations.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::route_destinations::Relation::Routes.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
