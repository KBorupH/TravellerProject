//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "roadmap")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub origin_id: Uuid,
    pub destination_id: Uuid,
    pub estimated_time: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::destination::Entity")]
    Destination,
    #[sea_orm(
        belongs_to = "super::station::Entity",
        from = "Column::DestinationId",
        to = "super::station::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Station2,
    #[sea_orm(
        belongs_to = "super::station::Entity",
        from = "Column::OriginId",
        to = "super::station::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Station1,
}

impl Related<super::destination::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Destination.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
