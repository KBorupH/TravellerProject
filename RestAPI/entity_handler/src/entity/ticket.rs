//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "ticket")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub passenger_id: Uuid,
    #[sea_orm(primary_key)]
    pub seat_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub train_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::passenger::Entity",
        from = "Column::PassengerId",
        to = "super::passenger::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Passenger,
    #[sea_orm(
        belongs_to = "super::seat::Entity",
        from = "Column::SeatId",
        to = "super::seat::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Seat,
}

impl Related<super::passenger::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Passenger.def()
    }
}

impl Related<super::seat::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Seat.def()
    }
}

impl Related<super::trains::Entity> for Entity {
    fn to() -> RelationDef {
        super::seat::Relation::Trains.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::seat::Relation::Ticket.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
